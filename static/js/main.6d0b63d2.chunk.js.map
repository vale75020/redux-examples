{"version":3,"sources":["actions/index.js","App.js","serviceWorker.js","reducers/counter.js","reducers/isLogged.js","reducers/index.js","index.js"],"names":["increment","nr","type","payload","decrement","App","counter","useSelector","state","isLogged","dispatch","useDispatch","react_default","a","createElement","className","onClick","Boolean","window","location","hostname","match","counterReducer","arguments","length","undefined","action","loggedReducer","allReducers","combineReducers","mystore","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","store","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4MAAaA,EAAY,SAACC,GACtB,MAAO,CACHC,KAAM,YACNC,QAASF,IAIJG,EAAY,WACrB,MAAO,CACHF,KAAM,cCcCG,MAlBf,WACE,IAAMC,EAAUC,YAAY,SAAAC,GAAK,OAAIA,EAAMF,UACrCG,EAAWF,YAAY,SAAAC,GAAK,OAAIA,EAAMC,WACtCC,EAAWC,cACjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,qBAAaR,GACbM,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMN,EAASV,EAAU,MAA1C,MACAY,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMN,EAASN,OAAhC,MAGCK,EACCG,EAAAC,EAAAC,cAAA,kDACA,KCNaG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECLSC,EAXQ,WAAuB,IAAtBd,EAAsBe,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAd,EAAGG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC5C,OAAQC,EAAOxB,MACb,IAAK,YACH,OAAOM,EAAQkB,EAAOvB,QACxB,IAAK,YACH,OAAOK,EAAQ,EACjB,QACE,OAAOA,ICAEmB,EATO,WAA2B,IAA1BnB,EAA0Be,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAC7C,QAD6CA,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAC/BvB,MACV,IAAK,UACD,OAAQM,EACR,QACI,OAAOA,ICIRoB,EALKC,YAAgB,CAChCvB,QAASgB,EACTb,SAAUkB,ICIRG,EAAUC,YACZH,EACAV,OAAOc,8BAAgCd,OAAOc,gCAOlDC,IAASC,OAETtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAUC,MAAON,GACjBlB,EAAAC,EAAAC,cAACuB,EAAD,OAGEC,SAASC,eAAe,SJwGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6d0b63d2.chunk.js","sourcesContent":["export const increment = (nr) => {\n    return {\n        type: 'INCREMENT',\n        payload: nr\n    };\n};\n\nexport const decrement = () => {\n    return {\n        type: 'DECREMENT'\n    };\n};","import React from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {increment, decrement} from './actions';\n\n\nfunction App() {\n  const counter = useSelector(state => state.counter);\n  const isLogged = useSelector(state => state.isLogged);\n  const dispatch = useDispatch();\n  return (\n    <div className=\"App\">\n     <h1>Counter {counter}</h1>\n     <button onClick={() => dispatch(increment(5))}>+5</button>\n     <button onClick={() => dispatch(decrement())}>-1</button>\n\n\n     {isLogged \n     ? <h3>Valuable Information i shouldn't see</h3>\n     : \"\"}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// REDUCER -->  MODIFY STATE\n\nconst counterReducer = (state = 0, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return state + action.payload;\n    case \"DECREMENT\":\n      return state - 1;\n    default:\n      return state;\n  }\n};\n\nexport default counterReducer;\n","const loggedReducer = (state = false, action) => {\n    switch(action.type){\n        case 'SIGN_IN':\n            return !state;\n            default:\n                return state;\n    }\n};\n\nexport default loggedReducer;","import counterReducer from './counter';\nimport loggedReducer from './isLogged';\nimport {combineReducers} from 'redux';\n\nconst allReducers = combineReducers({\n    counter: counterReducer,\n    isLogged: loggedReducer  // or call it with the same name counterReducer : counterReducer  =>  counterReducer\n});\n\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore} from 'redux';  // create our store \nimport allReducers from './reducers'  // import all reducers\nimport { Provider } from 'react-redux';  // connect store with app\n\nconst mystore = createStore(\n    allReducers,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n\n\n\n\n\nReactDOM.render(\n\n<Provider store={mystore}>\n<App />\n</Provider>\n\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n//---------------------------------------------------------------------//\n\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// import {createStore} from 'redux';\n\n\n// STORE --> GLOBAL STATE\n\n// ACTION  -->  WHAT YOU WANT TO DO (increment) a function that returns an object\n// const increment = () => {\n//     return {\n//         type: 'INCREMENT'\n//     }\n// }\n\n// const decrement = () => {\n//     return {\n//         type: 'DECREMENT'\n//     }\n// }\n\n\n// REDUCER -->  MODIFY STATE\n// const counter = (state = 0, action) => {\n//     switch(action.type){\n//         case \"INCREMENT\":\n//             return state + 1;\n//         case \"DECREMENT\":\n//             return state - 1;\n//     }\n// };\n\n//  let store = createStore(counter);\n\n // Display it in the console\n//  store.subscribe(() => console.log(store.getState()));\n\n\n// DISPATCH  --> SEND ACTION TO REDUCER\n// store.dispatch(increment());\n// store.dispatch(decrement());\n\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n"],"sourceRoot":""}